// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ConsecutiveTransfer extends ethereum.Event {
  get params(): ConsecutiveTransfer__Params {
    return new ConsecutiveTransfer__Params(this);
  }
}

export class ConsecutiveTransfer__Params {
  _event: ConsecutiveTransfer;

  constructor(event: ConsecutiveTransfer) {
    this._event = event;
  }

  get fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DiamondMinted extends ethereum.Event {
  get params(): DiamondMinted__Params {
    return new DiamondMinted__Params(this);
  }
}

export class DiamondMinted__Params {
  _event: DiamondMinted;

  constructor(event: DiamondMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get diamond(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FacetRegistered extends ethereum.Event {
  get params(): FacetRegistered__Params {
    return new FacetRegistered__Params(this);
  }
}

export class FacetRegistered__Params {
  _event: FacetRegistered;

  constructor(event: FacetRegistered) {
    this._event = event;
  }

  get facet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get selectors(): Array<Bytes> {
    return this._event.parameters[1].value.toBytesArray();
  }
}

export class FacetUnregistered extends ethereum.Event {
  get params(): FacetUnregistered__Params {
    return new FacetUnregistered__Params(this);
  }
}

export class FacetUnregistered__Params {
  _event: FacetUnregistered;

  constructor(event: FacetUnregistered) {
    this._event = event;
  }

  get facet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__mintDiamondInputInitDiamondCutStruct extends ethereum.Tuple {
  get baseFacets(): Array<
    Contract__mintDiamondInputInitDiamondCutBaseFacetsStruct
  > {
    return this[0].toTupleArray<
      Contract__mintDiamondInputInitDiamondCutBaseFacetsStruct
    >();
  }

  get init(): Address {
    return this[1].toAddress();
  }

  get initData(): Bytes {
    return this[2].toBytes();
  }
}

export class Contract__mintDiamondInputInitDiamondCutBaseFacetsStruct extends ethereum.Tuple {
  get facet(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get selectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeFacetAddress(salt: Bytes, creationCode: Bytes): Address {
    let result = super.call(
      "computeFacetAddress",
      "computeFacetAddress(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(creationCode)
      ]
    );

    return result[0].toAddress();
  }

  try_computeFacetAddress(
    salt: Bytes,
    creationCode: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeFacetAddress",
      "computeFacetAddress(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(creationCode)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployFacet(
    salt: Bytes,
    creationCode: Bytes,
    selectors: Array<Bytes>
  ): Address {
    let result = super.call(
      "deployFacet",
      "deployFacet(bytes32,bytes,bytes4[]):(address)",
      [
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(creationCode),
        ethereum.Value.fromFixedBytesArray(selectors)
      ]
    );

    return result[0].toAddress();
  }

  try_deployFacet(
    salt: Bytes,
    creationCode: Bytes,
    selectors: Array<Bytes>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployFacet",
      "deployFacet(bytes32,bytes,bytes4[]):(address)",
      [
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(creationCode),
        ethereum.Value.fromFixedBytesArray(selectors)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  diamondAddress(tokenId: BigInt): Address {
    let result = super.call(
      "diamondAddress",
      "diamondAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toAddress();
  }

  try_diamondAddress(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "diamondAddress",
      "diamondAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  diamondId(diamond: Address): BigInt {
    let result = super.call("diamondId", "diamondId(address):(uint256)", [
      ethereum.Value.fromAddress(diamond)
    ]);

    return result[0].toBigInt();
  }

  try_diamondId(diamond: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("diamondId", "diamondId(address):(uint256)", [
      ethereum.Value.fromAddress(diamond)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  facetAddresses(): Array<Address> {
    let result = super.call(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_facetAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  facetSelectors(facet: Address): Array<Bytes> {
    let result = super.call(
      "facetSelectors",
      "facetSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(facet)]
    );

    return result[0].toBytesArray();
  }

  try_facetSelectors(facet: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "facetSelectors",
      "facetSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(facet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintDiamond(
    initDiamondCut: Contract__mintDiamondInputInitDiamondCutStruct
  ): Address {
    let result = super.call(
      "mintDiamond",
      "mintDiamond(((address,uint8,bytes4[])[],address,bytes)):(address)",
      [ethereum.Value.fromTuple(initDiamondCut)]
    );

    return result[0].toAddress();
  }

  try_mintDiamond(
    initDiamondCut: Contract__mintDiamondInputInitDiamondCutStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mintDiamond",
      "mintDiamond(((address,uint8,bytes4[])[],address,bytes)):(address)",
      [ethereum.Value.fromTuple(initDiamondCut)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddFacetCall extends ethereum.Call {
  get inputs(): AddFacetCall__Inputs {
    return new AddFacetCall__Inputs(this);
  }

  get outputs(): AddFacetCall__Outputs {
    return new AddFacetCall__Outputs(this);
  }
}

export class AddFacetCall__Inputs {
  _call: AddFacetCall;

  constructor(call: AddFacetCall) {
    this._call = call;
  }

  get facet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get selectors(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class AddFacetCall__Outputs {
  _call: AddFacetCall;

  constructor(call: AddFacetCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DeployFacetCall extends ethereum.Call {
  get inputs(): DeployFacetCall__Inputs {
    return new DeployFacetCall__Inputs(this);
  }

  get outputs(): DeployFacetCall__Outputs {
    return new DeployFacetCall__Outputs(this);
  }
}

export class DeployFacetCall__Inputs {
  _call: DeployFacetCall;

  constructor(call: DeployFacetCall) {
    this._call = call;
  }

  get salt(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get creationCode(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get selectors(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class DeployFacetCall__Outputs {
  _call: DeployFacetCall;

  constructor(call: DeployFacetCall) {
    this._call = call;
  }

  get facet(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintDiamondCall extends ethereum.Call {
  get inputs(): MintDiamondCall__Inputs {
    return new MintDiamondCall__Inputs(this);
  }

  get outputs(): MintDiamondCall__Outputs {
    return new MintDiamondCall__Outputs(this);
  }
}

export class MintDiamondCall__Inputs {
  _call: MintDiamondCall;

  constructor(call: MintDiamondCall) {
    this._call = call;
  }

  get initDiamondCut(): MintDiamondCallInitDiamondCutStruct {
    return changetype<MintDiamondCallInitDiamondCutStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MintDiamondCall__Outputs {
  _call: MintDiamondCall;

  constructor(call: MintDiamondCall) {
    this._call = call;
  }

  get diamond(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintDiamondCallInitDiamondCutStruct extends ethereum.Tuple {
  get baseFacets(): Array<MintDiamondCallInitDiamondCutBaseFacetsStruct> {
    return this[0].toTupleArray<
      MintDiamondCallInitDiamondCutBaseFacetsStruct
    >();
  }

  get init(): Address {
    return this[1].toAddress();
  }

  get initData(): Bytes {
    return this[2].toBytes();
  }
}

export class MintDiamondCallInitDiamondCutBaseFacetsStruct extends ethereum.Tuple {
  get facet(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get selectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class RemoveFacetCall extends ethereum.Call {
  get inputs(): RemoveFacetCall__Inputs {
    return new RemoveFacetCall__Inputs(this);
  }

  get outputs(): RemoveFacetCall__Outputs {
    return new RemoveFacetCall__Outputs(this);
  }
}

export class RemoveFacetCall__Inputs {
  _call: RemoveFacetCall;

  constructor(call: RemoveFacetCall) {
    this._call = call;
  }

  get facet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFacetCall__Outputs {
  _call: RemoveFacetCall;

  constructor(call: RemoveFacetCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
